#!/usr/bin/env python3.5

from sys import argv
from rdflib import Graph, Namespace, URIRef, Literal

# guard: commandline arguments
if len(argv) != 2:
    print('Syntax: %s OUTPUT_FILENAME' % argv[0])
    print('        %s brick-data.ttl' % argv[0])
    exit(1)
output_filename = argv[1]

################################################################ namespaces ####

g = Graph()

# source namespaces
RDF  = Namespace('http://www.w3.org/1999/02/22-rdf-syntax-ns#')
RDFS = Namespace('http://www.w3.org/2000/01/rdf-schema#')
OWL  = Namespace('http://www.w3.org/2002/07/owl#')
g.bind('rdf' , RDF)
g.bind('rdfs', RDFS)
g.bind('owl' , OWL)

# brick-data namespace
BD = Namespace('https://brickschema.org/schema/1.0.1/BrickData#')
g.bind('bd', BD)

# smap data namespace
BDSMAP = Namespace('https://brickschema.org/schema/1.0.1/BrickDataSmap#')
g.bind('bdsmap', BDSMAP)

# static data namespace
BDS = Namespace('https://brickschema.org/schema/1.0.1/BrickDataStatic#')
g.bind('bds', BDS)

###################################################################### data ####

Data = BD['Data']
g.add( (Data, RDF['type'], OWL['Class']) ) # TODO: should this not be RDFS.subClassOf?

has_data = BD['hasData']
g.add( (has_data, RDF['type'], OWL['ObjectProperty']) )

################################################################# smap data ####

SmapData = BDSMAP['Data']
g.add( (SmapData, RDFS.subClassOf, Data) )

has_smap_data = BDSMAP['hasData']
g.add( (has_smap_data, RDFS.subClassOf, has_data) )

Archiver = BDSMAP['Archiver']
g.add( (Archiver, RDF['type'], OWL['Class']) )

archivedAt = BDSMAP['archivedAt']
g.add( (archivedAt, RDF['type'], OWL['ObjectProperty']) )

add_path = BDSMAP['add']
g.add( (add_path, RDF['type'], OWL['ObjectProperty']) )

query_path = BDSMAP['query']
g.add( (query_path, RDF['type'], OWL['ObjectProperty']) )

uuid = BDSMAP['uuid']
g.add( (uuid, RDF['type'], OWL['ObjectProperty']) )

key = BDSMAP['key']
g.add( (key, RDF['type'], OWL['ObjectProperty']) )

############################################################### static data ####

StaticData = BDS['Data']
g.add( (StaticData, RDFS.subClassOf, Data) )

has_static_data = BDS['hasData']
g.add( (has_static_data, RDFS.subClassOf, has_data) )

value = BDS['value']
g.add( (value, RDF['type'], OWL['Class']) )

######################################################### modeling approach ####

ModelApproach = BD['Model_Approach']
g.add( (ModelApproach, RDF['type'], OWL['Class']) )

Property = BD['Property']
g.add( (Property, RDF['type'], OWL['Class']) )

hasProperty = BD['hasProperty']
g.add( (hasProperty, RDF['type'], OWL['ObjectProperty']) )

############################################################## store result ####

# store result
print('Number of relations: %u' % (len(g)))
g.serialize(output_filename, 'turtle')

