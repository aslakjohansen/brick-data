#!/usr/bin/env python

from os import listdir
import json
from time import time
import rdflib

buildingdir = 'buildings'
querydir = 'queries'
outputfilename = 'results.json'
blacklist_suite = [
    'solar',
]
blacklist_qpath = [
    'queries/lighting-concumption.rq',
    'queries/lighting-threshold-read.rq',
    'queries/lighting-threshold-write.rq',
]

def load_buildings ():
    r = []
    
    for filename in listdir(buildingdir):
        if not filename.endswith('.ttl'):
            continue
        
        path = '%s/%s' % (buildingdir, filename)
        name = filename.split('.')[0]
        model = rdflib.Graph()
        model.parse(path, format='turtle')
        
        r.append({
            'path':  path,
            'id':    name,
            'model': model,
        })
    
    return r

def load_tests ():
    r = []
    
    for filename in listdir(querydir):
        if not filename.endswith('.rq'):
            continue
        
        path = '%s/%s' % (querydir, filename)
        suite = filename.split('-')[0]
        with open(path) as fo:
            query = ''.join(fo.readlines())
        
        r.append({
            'path':  path,
            'suite': suite,
            'test':  filename[len(suite)+1:-3],
            'query': query,
        })
    
    return r

# init
buildings = load_buildings()
tests     = load_tests()
results   = {}

# iteration
for i in range(11):
    for test in tests:
        for building in buildings:
            suite = test['suite']
            testcase = test['test']
            qpath = test['path']
            bid   = building['id']
            
            # perform blacklisting
            if qpath in blacklist_qpath:
                continue
            if suite in blacklist_suite:
                continue
            
            # perform test
            t0 = time()
            r = building['model'].query(test['query'])
            dt = time() - t0
            resultcount = len(list(r))
            
            # log result
            if not suite in results: results[suite] = {}
            if not testcase in results[suite]: results[suite][testcase] = {}
            if not bid in results[suite][testcase]: results[suite][testcase][bid] = []
            results[suite][testcase][bid].append({
                't0': t0,
                'dt': dt,
                'results': resultcount,
                'building': building['path'],
                'query': test['path'],
            })
    
    if i % 10 == 0:
        print('Done with iteration %u. Dumping to %s' % (i, outputfilename))
        
        with open(outputfilename, 'w') as fo:
            dump = json.dumps(results, sort_keys=True, indent=4, separators=(',', ': '))
            fo.writelines(dump)
            print('written (%s|%s) to %s' % (type(dump), len(dump), outputfilename))
#            print(results)

