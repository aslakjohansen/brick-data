#!/usr/bin/env python3.5

import json
from subprocess import Popen, PIPE, STDOUT

dirname = 'figs'
figs = []
colcount = 4
figscale = 0.2

anonymizer = {
#    'GTH':  'GTH',
#    'OU44': 'OU44',
    'GTH':  'B1',
    'OU44': 'B2',
}


def system (command):
    p = Popen(command, shell=True, stdout=PIPE, close_fds=True)
    return p.stdout.readlines()

# read input
with open('results.json') as fo:
    data = json.loads(''.join(fo.readlines()))

# process
for suite in data:
    for test in data[suite]:
        for building in data[suite][test]:
            # generate csv file
            lines = []
            for sample in map(lambda entry: entry['dt'], data[suite][test][building]):
                lines.append('%f\n' % sample)
            filename = '%s/%s_%s_%s.csv' % (dirname, suite, test, building)
            with open(filename, 'w') as fo:
                fo.writelines(lines)
        
        # generate r file
        lines = []
        lines.append('#!/usr/bin/env r')
        lines.append('')
        lines.append('pdf(\'%s/%s_%s.pdf\')' % (dirname, suite, test))
        lines.append('')
        lines.append('# read inputs')
        lines.append('gth  <- scan("%s/%s_%s_gth.csv")' % (dirname, suite, test))
        lines.append('ou44 <- scan("%s/%s_%s_ou44.csv")' % (dirname, suite, test))
        lines.append('')
        lines.append('# generate 98% percentile')
        lines.append('gth_percentile  = gth[gth < quantile(gth, 0.98)]')
        lines.append('ou44_percentile = ou44[ou44 < quantile(ou44, 0.98)]')
        lines.append('')
        lines.append('# desinty calculations')
        lines.append('dens_gth  <- density(gth)')
        lines.append('dens_ou44 <- density(ou44)')
        lines.append('')
        lines.append('# calculate ranges')
        lines.append('xmax <- max(dens_gth$x,dens_ou44$x)')
        lines.append('xlim <- range(gth_percentile,ou44_percentile)')
        lines.append('ylim <- range(0,dens_gth$y, dens_ou44$y)')
        lines.append('')
        lines.append('# plot title')
        lines.append('title = sprintf(\'Distribution of %s - %s\\nshowing 98%%%% percentile, long tail ends at %%6.3fms\', xmax*1000)' % (suite, test))
#        lines.append('title = \'Distribution of %s - %s\'')
        lines.append('print(title)')
        lines.append('')
        lines.append('# colors')
        lines.append('col_gth  <- rgb(1,0,0,0.2)')
        lines.append('col_ou44 <- rgb(0,0,1,0.2)')
        lines.append('')
        lines.append('# perform plotting')
        lines.append('plot(dens_gth, xlim = xlim, ylim = ylim, xlab = \'Time/[s]\', main = title,  panel.first = grid())')
        lines.append('polygon(dens_gth , density = -1, col = col_gth)')
        lines.append('polygon(dens_ou44, density = -1, col = col_ou44)')
        lines.append('legend(\'topright\',c(\'%s\',\'%s\'), fill = c(col_gth, col_ou44), bty = \'n\', border = NA)' % (anonymizer['GTH'], anonymizer['OU44']))
        lines.append('')
        lines.append('dev.off()')
        filename = '%s/%s_%s.r' % (dirname, suite, test)
        with open(filename, 'w') as fo:
            fo.writelines(map(lambda line: '%s\n' % line, lines))
        system('chmod u+x %s' % filename)
        
        # execute r file
        system('./%s' % filename)
        
        # register plot
        figs.append('%s/%s_%s.pdf' % (dirname, suite, test))

lines = []
lines.append('\\begin{figure*}')
lines.append('  \\begin{center}')
for i in range(len(figs)):
    lines.append('    \\scalebox{%f}{\\includeRaw{%s}}' % (figscale, figs[i]))
    if i!=len(figs)-1 and (i-1) % colcount == colcount-2:
        lines.append('    \\\\')
lines.append('  \\end{center}')
lines.append('  \\vspace{-5mm}')
lines.append('  \\caption{\\label{fig:overhead} Overhead of queries on building models}')
lines.append('\\end{figure*}')
with open('overhead_overhead.tex', 'w') as fo:
    fo.writelines(map(lambda line: '%s\n' % line, lines))


